import { ElementRef, TemplateRef } from '@angular/core';
import { MbscCalendarEvent, MbscCalendarEventData, MbscEventConnection, MbscNewEventData, MbscResource, MbscSlot } from '../../core/components/eventcalendar/eventcalendar';
import { TimelineBase } from '../../core/components/eventcalendar/timeline/timeline';
import { MbscCalendarNavService } from '../../core/shared/calendar-nav/calendar-nav';
import { DateType, ITimezonePlugin } from '../../core/util/datetime';
export declare class MbscTimeline extends TimelineBase {
    vScrollCont: ElementRef;
    vGridCont: ElementRef;
    vHeaderCont: ElementRef;
    vResCont: ElementRef;
    vStickyHeader: ElementRef;
    vStickyDate: ElementRef;
    vStickyMonth: ElementRef;
    vStickyWeek: ElementRef;
    vCursorTimeCont: ElementRef;
    allDayText: string;
    amText: string;
    clickToCreate: boolean | 'single' | 'double';
    colorsMap: {
        [key: number]: MbscCalendarEvent[];
    };
    connections: MbscEventConnection[];
    dateFormat: string;
    dateFormatLong: string;
    dataTimezone: string;
    dayNames: string[];
    dayNamesMin: string[];
    dayNamesShort: string[];
    dayTemplate: TemplateRef<any>;
    displayTimezone: string;
    dragTimeStep: number;
    dragToCreate: boolean;
    dragToMove: boolean;
    dragToResize: boolean;
    endDay: number;
    endTime: string;
    eventDragEnd: (args: any) => void;
    eventMap: {
        [key: number]: MbscCalendarEvent[];
    };
    eventContentTemplate: TemplateRef<any>;
    eventOrder: (event1: MbscCalendarEvent, event2: MbscCalendarEvent) => number;
    eventTemplate: TemplateRef<any>;
    exclusiveEndDates: boolean;
    extendDefaultEvent: (args: MbscNewEventData) => MbscCalendarEvent;
    externalDrop: boolean;
    eventList: boolean;
    firstDay: number;
    fromText: string;
    getDay: (d: Date) => number;
    getDate: (y: number, m: number, d: number, h?: number, i?: number, s?: number, u?: number) => number;
    getMaxDayOfMonth: (y: number, m: number) => number;
    getMonth: (d: Date) => number;
    getWeekNumber: (d: Date) => number;
    getYear: (d: Date) => number;
    groupBy: 'date' | 'resource';
    height: number;
    invalidateEvent: 'start-end' | 'strict';
    invalidsMap: {
        [key: number]: MbscCalendarEvent[];
    };
    maxDate: number;
    minDate: number;
    navigateToEvent: MbscCalendarEvent;
    monthNames: string[];
    monthNamesShort: string[];
    navigationService: MbscCalendarNavService;
    newEventText: string;
    nextIcon: string;
    nextIconRtl: string;
    downIcon: string;
    pmText: string;
    refDate: DateType;
    resolution: 'year' | 'month' | 'week' | 'day' | 'hour';
    resources: MbscResource[] | null | undefined;
    resourceHeaderTemplate: TemplateRef<any>;
    resourceTemplate: TemplateRef<any>;
    rowHeight: 'variable' | 'equal';
    scroll: number;
    selected: number;
    selectedEventsMap: {
        [key: number]: MbscCalendarEvent;
    };
    showAllDay: boolean;
    showDays: boolean;
    showEventTooltip: boolean;
    size: number;
    slots: MbscSlot[] | null | undefined;
    slotTemplate: TemplateRef<any>;
    startDay: number;
    startTime: string;
    timeCellStep: number;
    timeFormat: string;
    timeLabelStep: number;
    timezonePlugin: ITimezonePlugin;
    toText: string;
    type: 'week' | 'day' | 'month' | 'year';
    virtualScroll: boolean;
    weekNumbers: boolean;
    weekText: string;
    width: number;
    onCellClick: (args: any) => void;
    onCellDoubleClick: (args: any) => void;
    onCellRightClick: (args: any) => void;
    onEventClick: (args: any) => void;
    onEventDoubleClick: (args: any) => void;
    onEventRightClick: (args: any) => void;
    onEventHoverIn: (args: any) => void;
    onEventHoverOut: (args: any) => void;
    onEventDelete: (args: any) => void;
    onEventDragEnd: (args: any) => void;
    onEventDragStart: (args: any) => void;
    onWeekDayClick: (args: any) => void;
    _defId: string;
    _oneDay: number;
    _checkDisplay(event: MbscCalendarEventData, checkDrag?: boolean): boolean;
    _getDayKey(index: number, day: any): number;
    _getEventArgs(dayEvents: any, slot: any, v: number, event: any, resource: string | number): {
        date: Date;
        domEvent: any;
        resource: string | number;
        slot: any;
        source: string;
    };
    _getEventKey(index: number, data: any): any;
    _getDragKey(resourceId: number | string, slotId: string | number, dateKey: string): string;
    _getId(index: number, data: any): any;
    protected _mounted(): void;
}
