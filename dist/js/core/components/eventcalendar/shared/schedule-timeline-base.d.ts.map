{"version":3,"file":"schedule-timeline-base.d.ts","sources":["schedule-timeline-base.d.ts"],"names":[],"mappingssourcesContent":["import { BaseComponent } from '../../../base';\nimport { MbscCalendarEvent, MbscCalendarEventData, MbscResource } from '../eventcalendar';\nimport { MbscSlot } from '../eventcalendar.types';\nimport { IDailyColors, IDailyEvents, IDailyInvalids, IDayData, IEventPosData, ISTOptions, ISTState, IVirtualPage } from './schedule-timeline-base.types';\n/** @hidden */\nexport declare class STBase<PropType extends ISTOptions, StateType extends ISTState> extends BaseComponent<PropType, StateType> {\n    _batchEnd: Date;\n    _batchStart: Date;\n    _batchRowNr: number;\n    _colIndexMap: {\n        [key: string]: number;\n    };\n    _colors: {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyColors;\n            };\n        };\n    };\n    /** Array containing the columns to display */\n    _cols: IDayData[];\n    _colsNr: number;\n    /** Map containing the day index for each day; timestamp ->  dayIndex */\n    _dayIndexMap: {\n        [key: string]: number;\n    };\n    _dayNames: string[];\n    /** Array containing the days to display */\n    _days: IDayData[];\n    _daysBatch: IDayData[];\n    _daysBatchNr: number;\n    /** Number of displayed days */\n    _daysNr: number;\n    _displayTime: boolean;\n    _endCellStyle: {\n        height?: string;\n        width?: string;\n    } | undefined;\n    /** Displayed end time as milliseconds since midnight */\n    _endTime: number;\n    _eventHeight: number;\n    _eventMap: {\n        [key: string]: MbscCalendarEventData;\n    };\n    /** Number of event rows for a resource, used for row height calculation */\n    _eventRows: {\n        [key: number]: number;\n    };\n    _events: {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyEvents;\n            };\n        };\n    };\n    _firstDay: Date;\n    _firstDayTz: Date;\n    _gridWidth: number;\n    _groupByResource: boolean;\n    _gridHeight: number;\n    _hasHierarchy: boolean;\n    _hasSlots: boolean;\n    _hasSideSticky: boolean;\n    _hasSticky: boolean;\n    _headerDays: IDayData[];\n    _invalids: {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyInvalids;\n            };\n        };\n    };\n    _isDailyResolution: boolean;\n    _isMulti: boolean;\n    _isSingleResource: boolean;\n    _isTimeline: boolean;\n    _lastDay: Date;\n    _lastDayTz: Date;\n    _placeholderSizeX: number;\n    _placeholderSizeY: number;\n    /** Contains the resources flatten out into one level */\n    _resources: MbscResource[];\n    _resourcesBatch: MbscResource[];\n    _selectedDay: number;\n    _setRowHeight: boolean;\n    _showTimeIndicator: boolean;\n    _showCursorTime: boolean;\n    _slots: MbscSlot[];\n    _startCellStyle: {\n        height?: string;\n        width?: string;\n    } | undefined;\n    /** Displayed start time as milliseconds since midnight */\n    _startTime: number;\n    _stepCell: number;\n    _stepLabel: number;\n    /** Displayed time as milliseconds */\n    _time: number;\n    /** Array containing the hours to display */\n    _timeLabels: {\n        [key: number]: string;\n    };\n    _times: number[];\n    _timesBetween: number[];\n    protected _calcConnections: boolean;\n    protected _cursorTimeCont: HTMLElement | null;\n    protected _gridCont: HTMLElement | null;\n    protected _headerCont: HTMLElement | null;\n    protected _isParentClick: boolean;\n    protected _resCont: HTMLElement | null;\n    protected _resourceTops: {\n        [key: string]: number;\n    };\n    protected _scrollCont: HTMLElement | null;\n    protected _shouldAnimateScroll: boolean | undefined;\n    protected _shouldCheckSize: boolean;\n    protected _shouldScroll: boolean;\n    protected _visibleResources: MbscResource[];\n    protected _virtualPagesY: IVirtualPage[];\n    private _allDayTop;\n    private _cursorX;\n    private _cursorY;\n    private _colHeight;\n    private _colWidth;\n    private _gridContBottom;\n    private _gridContLeft;\n    private _gridContRight;\n    private _gridContTop;\n    private _gridLeft;\n    private _gridRight;\n    private _gridTop;\n    private _isCursorTimeVisible;\n    private _isTouch;\n    private _onCalendar;\n    private _resWidth;\n    private _scrollTimer;\n    private _scrollX;\n    private _scrollY;\n    private _tempAllDay;\n    private _tempEnd;\n    private _tempEvent;\n    private _tempResource;\n    private _tempSlot;\n    private _tempStart;\n    private _touchTimer;\n    private _unlisten;\n    private _unsubscribe;\n    _isToday(d: number): boolean;\n    _formatTime(v: number, timezone?: string): string;\n    _onScroll: () => void;\n    _onMouseLeave: () => void;\n    _onMouseMove: (ev?: any, delta?: number) => void;\n    _onEventDragModeOn: (args: any) => void;\n    _onEventDragModeOff: (args: any) => void;\n    _onEventDragStart: (args: any) => void;\n    _onEventDragMove: (args: any) => void;\n    _onEventDragEnd: (args: any) => void;\n    _onExternalDrag: (args: any) => void;\n    protected _getEventPos(event: MbscCalendarEventData, day: Date, dateKey: string, displayedMap: Map<MbscCalendarEvent, boolean>): IEventPosData | undefined;\n    protected _getEventData(event: MbscCalendarEvent, d: Date, resource?: MbscResource, skipLabels?: boolean): MbscCalendarEventData;\n    protected _getEvents(eventMap: {\n        [key: string]: MbscCalendarEvent[];\n    }): {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyEvents;\n            };\n        };\n    };\n    protected _getInvalids(invalidMap: {\n        [key: string]: MbscCalendarEvent[];\n    }): {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyInvalids;\n            };\n        };\n    };\n    protected _getColors(colorMap: {\n        [key: string]: MbscCalendarEvent[];\n    }): {\n        [key: string]: {\n            [key: string]: {\n                [key: string]: IDailyColors;\n            };\n        };\n    };\n    protected _flattenResources(resources: MbscResource[] | null | undefined, flat: MbscResource[], depth: number, all?: boolean): MbscResource[];\n    protected _render(s: ISTOptions, state: ISTState): void;\n    protected _mounted(): void;\n    protected _updated(): void;\n    protected _destroy(): void;\n    private _calcGridSizes;\n    private _getDragDates;\n    /**\n     * Returns a date with the time based on the coordinates on the grid.\n     * @param day We're on this day.\n     * @param posX X coord - for timeline.\n     * @param posY Y coord - for schedule.\n     * @param dayIndex Index of the day on the timeline.\n     * @param timeStep Time step in minutes.\n     */\n    private _getGridTime;\n    private _scrollToTime;\n}\n"]}